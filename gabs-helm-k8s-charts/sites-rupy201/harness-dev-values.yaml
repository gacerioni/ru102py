# Default values for gabs-harness-java-ff-demo.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

createNamespace: true
namespace: <+infra.namespace>

nameOverride: <+service.name>

image:
  full_image_name: <+artifact.image>
  pullPolicy: Always

podAnnotations:
  prometheus.io/scrape: 'true'
  prometheus.io/path: '/metrics'
  #prometheus.io/port: '8080'

env:
  config:
    HARNESS_FF_SDK_KEY: "gabsdummysdkkey"

# in case we dont have the ingress controller available
service:
  type: NodePort
  port: 8080
  nodePort: 30085

# this is a default pwd, but we will override with Harness capabilities (no vendor lockin, just values yaml overrides)
master:
  password: ""
persistence:
  enabled: true

resources:
  limits:
   cpu: '0.5'
   memory: '250Mi'
  requests:
   cpu: '0.5'
   memory: '250Mi'


# VOLUMES FOR APPD and ET HARNESS WILL BE HARDCODED IN THE DEPLOYMENT BECAUSE I AM USING MULTIPLE CONTAINERS AND INIT CONTAINERS

#### GABS HACK ENDS HERE

imagePullSecrets: []
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local


autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80


nodeSelector: {}

tolerations: []

affinity: {}